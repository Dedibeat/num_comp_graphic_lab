#include<iostream>
#include<vector>
#include<fstream>
#include<unistd.h>
#include<sstream>
#include<cmath>

#include <GL/glut.h>
#include <GL/gl.h>

using namespace std;

static GLfloat xRot = 0.0f;
static GLfloat yRot = 0.0f;
static GLfloat zRot = 0.0f;

vector<float> vertices;    // Change to float
vector<float> normals;
vector<GLuint> indices;

vector<float> vertices1;
vector<float> normals1;
vector<GLuint> indices1;

struct Face {
    GLuint v1, v2, v3;
};

int scale = 40;

vector<Face> faces;
vector<Face> faces1;

void visualizeNormals() {
    glDisable(GL_LIGHTING);
    glColor3f(0.0, 1.0, 0.0); // Green for normals
    glBegin(GL_LINES);
    for (size_t i = 0; i < vertices.size(); i += 3) {
        float x = vertices[i];
        float y = vertices[i + 1];
        float z = vertices[i + 2];
        float nx = normals[i];
        float ny = normals[i + 1];
        float nz = normals[i + 2];
        glVertex3f(x, y, z);
        glVertex3f(x + nx * 0.4f, y + ny * 0.4f, z + nz * 0.4f);
    }
    glEnd();
    glEnable(GL_LIGHTING);
}


void ReduceToUnit(float vector[3]) {
    float length;
    // Calculate the length of the vector
    length = (float)sqrt((vector[0]*vector[0]) +
                         (vector[1]*vector[1]) +
                         (vector[2]*vector[2]));

    // Keep the program from blowing up by providing an acceptable
    // value for vectors that may calculate too close to zero.
    if(length == 0.0f)
        length = 1.0f;

    // Dividing each element by the length will result in a
    // unit normal vector.
    vector[0] /= length;
    vector[1] /= length;
    vector[2] /= length;
}

// Points p1, p2, & p3 specified in counter-clockwise order
void calcNormal(float v[3][3], float out[3]) {
    float v1[3], v2[3];
    static const int x = 0;
    static const int y = 1;
    static const int z = 2;

    // Calculate two vectors from the three points
    v1[x] = v[0][x] - v[1][x];
    v1[y] = v[0][y] - v[1][y];
    v1[z] = v[0][z] - v[1][z];

    v2[x] = v[1][x] - v[2][x];
    v2[y] = v[1][y] - v[2][y];
    v2[z] = v[1][z] - v[2][z];

    // Take the cross product of the two vectors to get
    // the normal vector which will be stored in out
    out[x] = v1[y]*v2[z] - v1[z]*v2[y];
    out[y] = v1[z]*v2[x] - v1[x]*v2[z];
    out[z] = v1[x]*v2[y] - v1[y]*v2[x];

    // Normalize the vector (shorten length to one)
    ReduceToUnit(out);
}

void SpecialKeys(int key, int x, int y) {
    if (key == GLUT_KEY_F1) zRot -= 5.0f;
    if (key == GLUT_KEY_F2) zRot += 5.0f;
    if (key == GLUT_KEY_UP) xRot -= 5.0f;
    if (key == GLUT_KEY_DOWN) xRot += 5.0f;
    if (key == GLUT_KEY_LEFT) yRot -= 5.0f;
    if (key == GLUT_KEY_RIGHT) yRot += 5.0f;

    xRot = (GLfloat)((const int)xRot % 360);
    yRot = (GLfloat)((const int)yRot % 360);

    // Refresh the Window
    glutPostRedisplay();
}

void init() {
    GLfloat ambient[] = {0.0, 0.0, 0.0, 1.0};
   GLfloat diffuse[] = {1.0, 1.0, 1.0, 1.0};
   GLfloat specular[] = {1.0, 1.0, 1.0, 1.0};
   GLfloat position[] = {0.0, 3.0, 3.0, 0.0};

   GLfloat lmodel_ambient[] = {0.2, 0.2, 0.2, 1.0};
   GLfloat local_view[] = {0.0};

   glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
   glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);
   glLightfv(GL_LIGHT0, GL_POSITION, position);
   glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient);
   glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view);

   glFrontFace(GL_CW);
   glEnable(GL_LIGHTING);
   glEnable(GL_LIGHT0);
   glEnable(GL_AUTO_NORMAL);
   glEnable(GL_NORMALIZE);
   glEnable(GL_DEPTH_TEST);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(90.0, 1.33, 0.1, 200.0); // Field of view, aspect ratio, near and far planes


   gluLookAt(30, 30, 30,
              0.0, 0.0, 0.0,
              0.0, 1.0, 0.0);
}

void renderBunny(float x, float y,
            float ambr, float ambg, float ambb,
            float difr, float difg, float difb,
            float specr, float specg, float specb, float shine) {

   GLfloat mat[4];

   glPushMatrix();
   glTranslatef(x, y, 0.0);
   mat[0] = ambr; mat[1] = ambg; mat[2] = ambb; mat[3] = 1.0;
   glMaterialfv(GL_FRONT, GL_AMBIENT, mat);
   mat[0] = difr; mat[1] = difg; mat[2] = difb;
   glMaterialfv(GL_FRONT, GL_DIFFUSE, mat);
   mat[0] = specr; mat[1] = specg; mat[2] = specb;
   glMaterialfv(GL_FRONT, GL_SPECULAR, mat);
   glMaterialf(GL_FRONT, GL_SHININESS, shine * 128.0);

    glRotatef(xRot, 1.0, 0.0, 0.0);
    glRotatef(yRot, 0.0, 1.0, 0.0);
    glRotatef(zRot, 0.0, 0.0, 1.0);
   glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_NORMAL_ARRAY);
    glVertexPointer(3, GL_FLOAT, 0, vertices.data());
    glNormalPointer(GL_FLOAT, 0, normals.data());

    glDrawElements(GL_TRIANGLES, indices.size(), GL_UNSIGNED_INT, indices.data());

   glPopMatrix();
}

void renderDragon(float x, float y,
            float ambr, float ambg, float ambb,
            float difr, float difg, float difb,
            float specr, float specg, float specb, float shine){

   GLfloat mat[4];

   glPushMatrix();
   glTranslatef(x, y, 0.0);
   mat[0] = ambr; mat[1] = ambg; mat[2] = ambb; mat[3] = 1.0;
   glMaterialfv(GL_FRONT, GL_AMBIENT, mat);
   mat[0] = difr; mat[1] = difg; mat[2] = difb;
   glMaterialfv(GL_FRONT, GL_DIFFUSE, mat);
   mat[0] = specr; mat[1] = specg; mat[2] = specb;
   glMaterialfv(GL_FRONT, GL_SPECULAR, mat);
   glMaterialf(GL_FRONT, GL_SHININESS, shine * 128.0);

    glRotatef(xRot, 1.0, 0.0, 0.0);
    glRotatef(yRot, 0.0, 1.0, 0.0);
    glRotatef(zRot, 0.0, 0.0, 1.0);

    glVertexPointer(3, GL_FLOAT, 0, vertices1.data());
    glNormalPointer(GL_FLOAT, 0, normals1.data());

    glDrawElements(GL_TRIANGLES, indices1.size(), GL_UNSIGNED_INT, indices1.data());

    glDisableClientState(GL_VERTEX_ARRAY);
    glDisableClientState(GL_NORMAL_ARRAY);
   glPopMatrix();
}

void display(void) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    renderBunny(10.0, 0.0, 0.1745, 0.01175, 0.01175,
           0.61424, 0.04136, 0.04136, 0.727811, 0.626959, 0.626959, 0.6);
    renderDragon(-70.0, -10.0, 0.135, 0.2225, 0.1575,
      0.54, 0.89, 0.63, 0.316228, 0.316228, 0.316228, 0.1);
    glutSwapBuffers();
}

int main(int argc, char** argv){

    ifstream file1("C:\\Users\\Asus\\Desktop\\test glut\\comgraphiclab10\\bin\\Debug\\dragon.obj");
    if (!file1.is_open()) {
        cerr << "Failed to open the file.\n";
        return 1;
    }

    string line1;
    while (getline(file1, line1)) {
        istringstream lineStream(line1);
        string pfx;
        lineStream >> pfx;

        if (pfx == "v") {
            float x, y, z;   // Changed to float
            lineStream >> x >> y >> z;
            vertices1.push_back(x * scale);
            vertices1.push_back(y * scale);
            vertices1.push_back(z * scale);
        }

        if (pfx == "f") {
            GLuint v1, v2, v3;  // Changed to GLuint for index
            lineStream >> v1 >> v2 >> v3;
            faces1.push_back({v1 - 1, v2 - 1, v3 - 1});  // Obj files are 1-indexed, OpenGL is 0-indexed
        }
    }
    for (const auto& face : faces1) {
        indices1.push_back(face.v1);
        indices1.push_back(face.v2);
        indices1.push_back(face.v3);
    }

    // Compute vertex normals by averaging face normals
    vector<float> vertexNormals1(vertices1.size(), 0.0f); // Initialize vertexNormals with 0

    for (const auto& face : faces1) {
        float v[3][3] = {
            {vertices1[face.v1 * 3], vertices1[face.v1 * 3 + 1], vertices1[face.v1 * 3 + 2]},
            {vertices1[face.v2 * 3], vertices1[face.v2 * 3 + 1], vertices1[face.v2 * 3 + 2]},
            {vertices1[face.v3 * 3], vertices1[face.v3 * 3 + 1], vertices1[face.v3 * 3 + 2]}
        };

        float normal[3];
        calcNormal(v, normal); // Calculate face normal

        // Add the face normal to each vertex normal
        for (int i = 0; i < 3; ++i) {
            vertexNormals1[face.v1 * 3 + i] += normal[i];
            vertexNormals1[face.v2 * 3 + i] += normal[i];
            vertexNormals1[face.v3 * 3 + i] += normal[i];
        }
    }

// Normalize all vertex normals
    for (size_t i = 0; i < vertexNormals1.size(); i += 3) {
        float length = sqrt(vertexNormals1[i] * vertexNormals1[i] +
                            vertexNormals1[i + 1] * vertexNormals1[i + 1] +
                            vertexNormals1[i + 2] * vertexNormals1[i + 2]);
        if (length > 0.0f) {
            vertexNormals1[i] /= length;
            vertexNormals1[i + 1] /= length;
            vertexNormals1[i + 2] /= length;
        }
    }

    // Use vertexNormals as the normals array
    normals1 = vertexNormals1;

    ifstream file("C:\\Users\\Asus\\Desktop\\test glut\\comgraphiclab10\\bin\\Debug\\bunny.obj");
    if (!file.is_open()) {
        cerr << "Failed to open the file.\n";
        return 1;
    }
// -------------------------------
    string line;
    while (getline(file, line)) {
        istringstream lineStream(line);
        string pfx;
        lineStream >> pfx;

        if (pfx == "v") {
            float x, y, z;   // Changed to float
            lineStream >> x >> y >> z;
            vertices.push_back(x);
            vertices.push_back(y);
            vertices.push_back(z);
        }

        if (pfx == "f") {
            GLuint v1, v2, v3;  // Changed to GLuint for index
            lineStream >> v1 >> v2 >> v3;
            faces.push_back({v1 - 1, v2 - 1, v3 - 1});  // Obj files are 1-indexed, OpenGL is 0-indexed
        }
    }
    for (const auto& face : faces) {
        indices.push_back(face.v1);
        indices.push_back(face.v2);
        indices.push_back(face.v3);
    }

    // Compute vertex normals by averaging face normals
    vector<float> vertexNormals(vertices.size(), 0.0f); // Initialize vertexNormals with 0

    for (const auto& face : faces) {
        float v[3][3] = {
            {vertices[face.v1 * 3], vertices[face.v1 * 3 + 1], vertices[face.v1 * 3 + 2]},
            {vertices[face.v2 * 3], vertices[face.v2 * 3 + 1], vertices[face.v2 * 3 + 2]},
            {vertices[face.v3 * 3], vertices[face.v3 * 3 + 1], vertices[face.v3 * 3 + 2]}
        };

        float normal[3];
        calcNormal(v, normal); // Calculate face normal

        // Add the face normal to each vertex normal
        for (int i = 0; i < 3; ++i) {
            vertexNormals[face.v1 * 3 + i] += normal[i];
            vertexNormals[face.v2 * 3 + i] += normal[i];
            vertexNormals[face.v3 * 3 + i] += normal[i];
        }
    }

// Normalize all vertex normals
    for (size_t i = 0; i < vertexNormals.size(); i += 3) {
        float length = sqrt(vertexNormals[i] * vertexNormals[i] +
                            vertexNormals[i + 1] * vertexNormals[i + 1] +
                            vertexNormals[i + 2] * vertexNormals[i + 2]);
        if (length > 0.0f) {
            vertexNormals[i] /= length;
            vertexNormals[i + 1] /= length;
            vertexNormals[i + 2] /= length;
        }
    }

    // Use vertexNormals as the normals array
    normals = vertexNormals;


    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("3D Perspective with gluLookAt");

    init();
    glutSpecialFunc(SpecialKeys);
    glutDisplayFunc(display);

    glutMainLoop();
    return 0;
}
